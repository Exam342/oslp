Implement the C program in which main program accepts the integers to be sorted. Main program uses the FORK system call to create a new process called a child process.
Parent process sorts the integers using sorting algorithm and waits for child process using WAIT system call to sort the integers using any sorting algorithm.Also demonstrate zombie and orphan states. 

#include <stdio.h>
#include <stdlib.h>     //header file for exit
#include <unistd.h>     //header file for fork system call
#include <sys/types.h>  //header file for pid_t
#include<sys/wait.h>

void main()
{
	int n,i;
	printf("enter the number of array elements\n");
	scanf("%d",&n);    //read the number of array elements
	int a[n];
	printf("\nEnter the array elements\n");
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);    //read the array elements
	}

	void ascending(int *a,int n);     //parent process function 
	void descending(int *a,int n);    //child process function

	pid_t pid;
	pid=fork();        //creates a child process for current parent process

	if(pid<0)          //if creation of child process fails fork returns -1
	{
		printf("\nfork() error\n");
		exit(-1);
	}

	else if(pid==0)    //fork returns 0 to the child process
	{
		printf("\nCHILD PROCESS\n");
		descending(a,n);
		printf("ARRAY ELEMENTS IN DESCENDING ORDER ARE :\n");
		for(i=0;i<n;i++)
		{
			printf("%d\n",a[i]);
		}
		printf("\n");
		exit(0);   //termination of child process
	}

	else
	{
		int status;
		wait(NULL);    //parent process waits till the child process does not terminate
		printf("PARENT PROCESS\n");
		if(WIFEXITED(status))     //WIFEXITED returns true if process has exited normally
		{
			printf("CHILD PROCESS EXITED WITH STATUS OF %d\n",WEXITSTATUS(status));    //WEXITSTATUS returns the exit status of the child process
		}
		ascending(a,n);
		printf("\nARRAY ELEMENTS IN ASCENDING ORDER ARE :\n");
		for(i=0;i<n;i++)
		{
			printf("%d\n",a[i]);
		}
		printf("\n");
		exit(0);     //termination of parent process
	}
}

void ascending(int *a,int n)     //parent process sorts array in ascending order
{
	int i,j,temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-1-i;j++)
		{
			if(a[j+1]<a[j])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}
	}
}

void descending(int *a,int n)     //child process sorts array in descending order
{
	int i,j,temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-1-i;j++)
		{
			if(a[j+1]>a[j])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}
	}
}
